package com.mongo.repository;

import com.mongo.documents.Student;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.data.mongodb.repository.Query;
import org.springframework.data.querydsl.QuerydslPredicateExecutor;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface StudentRepository extends MongoRepository<Student, String> {

    // Autogenerated by spring
    List<Student> findBylastName(String lastName);

    @Query("{id :?0}")                                                  //SQL Equivalent : SELECT * FROM Student WHERE ID=?
    Optional<Student> getStudentById(String id);

    @Query("{score : {$lt: ?0}}")                                 // SQL Equivalent : SELECT * FROM Student where score<?
        //@Query("{ score : { $gte: ?0 } }")                        // SQL Equivalent : SELECT * FROM Student where score>=?
        //@Query("{ score : ?0 }")                                      // SQL Equivalent : SELECT * FROM Student where score=?
    List<Student> getStudentsByScore(Integer score);


    @Query("{firstName : ?0}")                                         // SQL Equivalent : SELECT * FROM Student where firstName = ?
    List<Student> getStudentsByName(String firstName);


    @Query("{firstName: ?0, lastName: ?1}")                            // SQL Equivalent : SELECT * FROM Student where firstName = ? and lastName=?
        //@Query("{$and :[{firstName: ?0},{lastName: ?1}] }")
    List<Student> getStudentsByFirstNameAndLastName(String firstName, String lastName);


    @Query("{$or :[{firstName: ?0},{lastName: ?1}]}")            //SQL Equivalent : select count(*) from Student where firstName=? or lastName=?
    List<Student> getStudentsByfirstNameOrlastName(String firstName, String lastName);


    @Query(value ="{firstName: ?0}", count=true)           //SQL Equivalent : select count(*) from Student where firstName=?
    Integer getStudentsCountByName(String firstName);

    //Sorting
    @Query(value = "{firstName:?0}", sort= "{lastName:1}") //ASC
    //@Query(value = "{firstName=?0}", sort= "{lastName:-1}") //DESC
    List<Student> getStudentsByfirstNameSortByName(String firstName);

    //------------------- @Query with Projection ---------------------------------------
    @Query(value= "{score: ?0}", fields="{firstName:1}")   // only data of firstName properties will be displayed
    //@Query(value= "{score: ?0}", fields="{name:1, firstName:1, cost:1, score:1}") // will display all properties data
    List<Student> getStudentNameAndfirstNameByscore(Integer score);


    @Query(value= "{firstName : ?0}")           // SQL Equivalent : SELECT * FROM Student select * from Students where firstName=?
    List<Student> getAllStudentsByfirstName(String firstName);

    //------------------MongoDB Regular Expressions--------------------------------------
    @Query("{ firstName : { $regex : ?0 } }")
    List<Student> getStudentsByfirstNameRegEx(String firstName);

}
